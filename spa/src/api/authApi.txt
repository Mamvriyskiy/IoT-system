import axios from "axios";
import MockAdapter from "axios-mock-adapter";
import { 
    loginUser, 
    registerUser, 
    codeUser, 
    verificationUser, 
    passwordUser, 
    getListHome, 
    addHome, 
    deleteHome 
} from "../.."; // replace with actual path

// Create an instance of axios-mock-adapter
const mock = new MockAdapter(axios);

describe('API Functions', () => {
    
    afterEach(() => {
        mock.reset();  // Reset after each test to avoid interference
    });

    test('loginUser - successful login', async () => {
        const mockData = { token: "mock_token" };
        mock.onPost('http://localhost:8000/auth/sign-in').reply(200, mockData);

        const data = { email: 'test@example.com', password: 'password123' };
        const response = await loginUser(data);
        expect(response).toEqual(mockData);
    });

    test('registerUser - successful registration', async () => {
        const mockData = { success: true };
        mock.onPost('http://localhost:8000/auth/sign-up').reply(200, mockData);

        const data = { email: 'test@example.com', password: 'password123', login: 'testUser' };
        const response = await registerUser(data);
        expect(response).toEqual(mockData);
    });

    test('codeUser - request code', async () => {
        const mockData = { success: true };
        mock.onPost('http://localhost:8000/auth/code').reply(200, mockData);

        const data = { email: 'test@example.com' };
        const response = await codeUser(data);
        expect(response).toEqual(mockData);
    });

    test('verificationUser - successful verification', async () => {
        const mockData = { success: true };
        mock.onPost('http://localhost:8000/auth/verification').reply(200, mockData);

        const data = { code: '123456', token: 'mock_token' };
        const response = await verificationUser(data);
        expect(response).toEqual(mockData);
    });

    test('passwordUser - successful password change', async () => {
        const mockData = { success: true };
        mock.onPut('http://localhost:8000/auth/password').reply(200, mockData);

        const data = { newPassword: 'newpassword123', token: 'mock_token' };
        const response = await passwordUser(data);
        expect(response).toEqual(mockData);
    });

    test('getListHome - successful fetch of homes', async () => {
        const mockData = [{ id: '1', name: 'Home 1' }];
        const token = 'mock_token';
        localStorage.setItem('jwt', token);
        mock.onGet('http://localhost:8000/api/homes/').reply(200, mockData);

        const response = await getListHome();
        expect(response).toEqual(mockData);
    });

    test('addHome - successful home addition', async () => {
        const mockData = { id: '2', name: 'Home 2' };
        const token = 'mock_token';
        localStorage.setItem('jwt', token);
        mock.onPost('http://localhost:8000/api/homes/').reply(200, mockData);

        const data = { name: 'Home 2' };
        const response = await addHome(data);
        expect(response).toEqual(mockData);
    });

    test('deleteHome - successful home deletion', async () => {
        const mockData = { success: true };
        const token = 'mock_token';
        const homeId = '2';
        localStorage.setItem('jwt', token);
        mock.onDelete(`http://localhost:8000/api/homes/${homeId}`).reply(200, mockData);

        const response = await deleteHome({ homeId });
        expect(response).toEqual(mockData);
    });

    test('getListHome - token not found', async () => {
        localStorage.removeItem('jwt');
        await expect(getListHome()).rejects.toThrow('Token not found');
    });

    test('addHome - token not found', async () => {
        localStorage.removeItem('jwt');
        const data = { name: 'Home 3' };
        await expect(addHome(data)).rejects.toThrow('Token not found');
    });

    test('deleteHome - token not found', async () => {
        localStorage.removeItem('jwt');
        const homeId = '3';
        await expect(deleteHome({ homeId })).rejects.toThrow('Token not found');
    });
});
