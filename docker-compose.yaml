version: "3.5"

services:
  postgres:
    container_name: postgres_container
    image: bitnami/postgresql
    environment:
      POSTGRESQL_PGAUDIT_LOG: READ,WRITE
      POSTGRESQL_LOG_HOSTNAME: true
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRESQL_REPLICATION_USER: repl_user
      POSTGRESQL_REPLICATION_PASSWORD: Smena
      POSTGRESQL_USERNAME: Misfio32
      POSTGRESQL_PASSWORD: Smena
      POSTGRESQL_DATABASE: postgres
      POSTGRESQL_REPLICATION_USE_PASSFILE: no 
    ports:
      - "5432:5432"
    volumes:
      - type: bind
        source: /Users/ivanmamvriyskiy/Desktop/web/main/postgresData/master
        target: /var/lib/postgresql/data
      - /Users/ivanmamvriyskiy/Desktop/web/main/postgresData/init.sql:/docker-entrypoint-initdb.d/init.sql
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready"]
    #   interval: 5s
    #   timeout: 10s
    #   retries: 5
    networks:
      - pgnetwork

  postgres_replica:
    container_name: postgres_replica_container
    image: bitnami/postgresql
    environment:
      POSTGRESQL_PASSWORD: Smena
      POSTGRESQL_MASTER_HOST: postgres_container
      POSTGRESQL_PGAUDIT_LOG: READ
      POSTGRESQL_LOG_HOSTNAME: true
      POSTGRESQL_REPLICATION_MODE: slave
      POSTGRESQL_REPLICATION_USER: repl_user
      POSTGRESQL_REPLICATION_PASSWORD: Smena
      POSTGRESQL_MASTER_PORT_NUMBER: 5432
      ALLOW_EMPTY_PASSWORD: yes
      POSTGRESQL_REPLICATION_USE_PASSFILE: no 
    ports:
      - "5433:5432"
    # depends_on:
    #   postgres:
    #     condition: service_healthy

    networks:
      - pgnetwork

  # mail:
  #   image: mailhog/mailhog
  #   ports:
  #     - 1025:1025
  #     - 8025:8025

  server:
    # image: my-golang-server
    build:
      dockerfile: main/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pgnetwork

  mirror_server1:
    # image: my-golang-server
    build:
      dockerfile: main/Dockerfile2
    ports:
      - "8001:8000"
    volumes:
      - type: bind
        source: /Users/ivanmamvriyskiy/Desktop/web/configs/config2.yml
        target: /app/configs/config.yml
    depends_on:
      postgres_replica:
        condition: service_healthy
    networks:
      - pgnetwork

  mirror_server2:
    # image: my-golang-server
    build:
      dockerfile: main/Dockerfile2
    ports:
      - "8002:8000"
    volumes:
      - type: bind
        source: /Users/ivanmamvriyskiy/Desktop/web/configs/config2.yml
        target: /app/configs/config.yml
    depends_on:
      postgres_replica:
        condition: service_healthy
    networks:
      - pgnetwork

  # nginx:
  #   image: nginx:alpine
  #   depends_on:
  #     - server
  #   restart: always
  #   ports:
  #     - "8081:8081"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/access.log:/etc/nginx/access.log
  #     - ./nginx/error.log:/etc/nginx/error.log
  #     - ./nginx/html:/etc/nginx/html

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5050:80" # доступ к pgAdmin через http://localhost:5050
    environment:
      PGADMIN_DEFAULT_EMAIL: prostolist32@list.ru # email для входа
      PGADMIN_DEFAULT_PASSWORD: 12345 # пароль для входа
    volumes:
      - /Users/ivanmamvriyskiy/Desktop/web/main/postgresData # постоянное хранилище для данных pgAdmin
    networks:
      - pgnetwork

  # swagger:
  #   image: swaggerapi/swagger-ui
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - SWAGGER_JSON=./mnt/swagger.yaml
  #   volumes:
  #     - ./main/swagger.yaml:/mnt/swagger.yaml

networks:
  pgnetwork:
    driver: bridge
